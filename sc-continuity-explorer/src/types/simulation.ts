
/**
 * TypeScript Type Definitions for Single-Cell Continuity Data
 * Matches Python ContinuityDataPrecomputer output structure exactly
 * 
 * Best Practice: Using 'type' for JSON data structures (not extendable)
 * Using 'interface' only when needed for declaration merging or extension
 */

// ============================================================================
// STEP 1: Basic Building Blocks
// ============================================================================

/**
 * Trajectory types supported by the simulator
 * Matches Python: ['linear', 'branching', 'cyclic', 'discrete']
 */
export type TrajectoryType = 'linear' | 'branching' | 'cyclic' | 'discrete';

/**
 * 2D point representation for embeddings
 * Python outputs: [[x1, y1], [x2, y2], ...]
 */
export type Point2D = [number, number];

/**
 * Array of 2D points for a complete embedding
 */
export type EmbeddingArray = Point2D[];

// ============================================================================
// STEP 2: Simulation Parameters (Input Configuration)
// ============================================================================

/**
 * Parameters used to generate a simulation
 * Directly matches Python params dict
 */
export type SimulationParameters = {
  trajectory_type: TrajectoryType;
  continuity: number;
  n_cells: number;
  n_dims: number;
  replicate: number;
  global_id?: number; // Added for reproducible seeding
};

// ============================================================================
// STEP 3: Embeddings Data
// ============================================================================

/**
 * Computed embeddings for visualization
 * Keys depend on embedding_methods parameter in Python
 * Common: 'pca', 'tsne', 'umap'
 */
export type EmbeddingData = {
  pca?: EmbeddingArray;
  tsne?: EmbeddingArray;
  umap?: EmbeddingArray;
};

// ============================================================================
// STEP 4: Simulation Metadata
// ============================================================================

/**
 * Metadata generated during simulation
 * Content varies by trajectory_type
 */
export type SimulationMetadata = {
  // Core metadata (always present)
  pseudotime: number[];
  cell_types: string[];
  n_cells: number;
  n_dims: number;
  trajectory_type: TrajectoryType;
  
  // Trajectory-specific metadata (conditional)
  branch_id?: number[];      // Present for 'branching'
  cycle_phase?: number[];    // Present for 'cyclic'
  cluster_labels?: number[]; // Present for 'discrete'
  n_timepoints?: number;
};

// ============================================================================
// STEP 5: Metrics Data
// ============================================================================

/**
 * Computed continuity and structural metrics
 * Python computes from self.metrics_to_compute
 */
export type MetricsData = {
  // Core metrics (from evaluator)
  spectral_decay?: number;
  anisotropy?: number;
  participation_ratio?: number;
  trajectory_directionality?: number;
  manifold_dimensionality?: number;
  noise_resilience?: number;
  
  // Embedding-derived metrics (computed per embedding method)
  variance_pca?: number;
  variance_tsne?: number;
  variance_umap?: number;
  
  // Trajectory-specific metrics (optional)
  mean_branch_length?: number;
  n_branch_points?: number;
  n_end_points?: number;
  global_continuity?: number;
  local_continuity?: number;
  trajectory_coverage?: number;
};

// ============================================================================
// STEP 6: Complete Simulation Result
// ============================================================================

/**
 * Complete simulation data package
 * Matches Python result dict structure exactly
 * 
 * Python generates:
 * {
 *   'id': str,
 *   'parameters': dict,
 *   'embeddings': dict,
 *   'metadata': dict,
 *   'metrics': dict
 * }
 */
export type SimulationResult = {
  id: string;
  parameters: SimulationParameters;
  embeddings: EmbeddingData;
  metadata: SimulationMetadata;
  metrics: MetricsData;
};

// ============================================================================
// STEP 7: Metadata Files (Generated by Python)
// ============================================================================

/**
 * Main manifest.json structure
 * Generated by _generate_metadata()
 */
export type DataManifest = {
  version: string;
  generation_timestamp: string;
  computation_duration_seconds: number;
  total_simulations: number;
  chunk_size: number;
  total_chunks: number;
  parameter_grid: {
    continuity: number[];
    trajectory_types: TrajectoryType[];
    n_cells: number[];
    n_dims: number[];
    replicates: number[];
  };
  random_seed: number;
  metrics_computed: string[];
  embedding_methods: string[];
};

/**
 * Metrics summary statistics
 * Generated by _compute_metrics_summary()
 */
export type MetricsSummary = Record<string, {
  min: number;
  max: number;
  mean: number;
  std: number;
  median: number;
  q25: number;
  q75: number;
}>;

/**
 * Parameter lookup for fast retrieval
 * Generated by _generate_metadata()
 * Key format: "{trajectory_type}_{continuity:.3f}_{n_cells}_{replicate}"
 */
export type ParameterLookup = Record<string, {
  chunk_id: number;
  index_in_chunk: number;
  simulation_id: string;
}>;

/**
 * Continuity index for filtered queries
 * Generated by _generate_continuity_index()
 * Key format: "{trajectory_type}_{continuity:.3f}"
 */
export type ContinuityIndex = Record<string, Array<{
  simulation_id: string;
  replicate: number;
  n_cells: number;
}>>;

// ============================================================================
// STEP 8: UI State Types (Frontend Only)
// ============================================================================

/**
 * Available embedding methods for visualization
 */
export type EmbeddingMethod = 'pca' | 'tsne' | 'umap';

/**
 * Color mapping options based on metadata fields
 */
export type ColorByOption = 
  | 'pseudotime' 
  | 'cell_types' 
  | 'branch_id' 
  | 'cycle_phase' 
  | 'cluster_labels';

/**
 * Visualization modes
 */
export type ViewMode = 'single' | 'comparison' | 'grid';

/**
 * Frontend explorer state
 * NOT present in Python output - UI state only
 */
export type ExplorerState = {
  continuity: number;
  trajectoryType: TrajectoryType;
  embeddingMethod: EmbeddingMethod;
  colorBy: ColorByOption;
  replicate: number;
  viewMode: ViewMode;
  showMetrics: boolean;
  isLoading: boolean;
  error: string | null;
};

// ============================================================================
// STEP 9: Visualization Configuration (Frontend Only)
// ============================================================================

/**
 * Chart configuration for D3/Canvas rendering
 */
export type ChartConfig = {
  width: number;
  height: number;
  margin: {
    top: number;
    right: number;
    bottom: number;
    left: number;
  };
  pointSize: number;
  pointOpacity: number;
};

/**
 * Computed bounds for embedding visualization
 */
export type Bounds = {
  minX: number;
  maxX: number;
  minY: number;
  maxY: number;
};
